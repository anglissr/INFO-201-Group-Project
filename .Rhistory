is_round <- function(num) {
round(num) == num
}
print(is_round(51.1))
print(is_round(51))
is_round <- function(num) {
round(num) == num
}
print(is_round(51))
print(is_round(50.0000))
is_round <- function(num) {
round(num) == num
}
print(is_round(50.0001))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.0000000000001))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
test
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
te
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.13))
library("ggplot2")
library("ggplot2")
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = class))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = class)) +
scale_color_brewer(palette = "Set3")
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = class)) +
scale_color_brewer(palette = "Set1")
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = class)) +
CoordFlip()
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy)) +
facet_wrap(class)
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = "blue"))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = blue))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = "red"))
ggplot(data = mpg) +
geom_bar(fill = "red", mapping = aes(x = hwy))
ggplot(data = mpg) +
geom_bar(fill = "blue", mapping = aes(x = hwy))
install.packages("plotly")
library(plotly)
library(plotly)
library(ggplot2)
x <- c("pA", "pB", "pC")
y <- c(20, 37, 12)
text <- c("29% Share", "67% Share", "7% Share")
data <- data.frame(x, y, text)
View(data)
View(data)
library(plotly)
library(ggplot2)
x <- c("pA", "pB", "pC")
y <- c(20, 37, 12)
text <- c("29% Share", "67% Share", "7% Share")
data <- data.frame(x, y, text)
p <- plot_ly(data, x = ~x, y = ~y, type = bar, text = text,
marker = list(color = "rgb(158,202,225",
line = list(color = "rgb(100,202,105",
width = 1,5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
library(plotly)
library(ggplot2)
x <- c("pA", "pB", "pC")
y <- c(20, 37, 12)
text <- c("29% Share", "67% Share", "7% Share")
data <- data.frame(x, y, text)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225",
line = list(color = "rgb(100,202,105",
width = 1,5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225)",
line = list(color = "rgb(100,202,105",
width = 1,5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225)",
line = list(color = "rgb(100,202,105)",
width = 1,5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225)",
line = list(color = "rgb(100,202,105)",
width = 1.5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225)",
line = list(color = "rgb(0,0,0)",
width = 1.5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225)",
line = list(color = "rgb(0,0,0)",
width = 2))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225)",
line = list(color = "rgb(0,0,0)",
width = 5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(51,0,111)",
line = list(color = "rgb(0,0,0)",
width = 5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(80,20,111)",
line = list(color = "rgb(0,0,0)",
width = 5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
library(plotly)
library(ggplot2)
x <- c("pA", "pB", "pC")
y <- c(20, 37, 12)
text <- c("29% Share", "67% Share", "7% Share")
data <- data.frame(x, y, text)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = toRgb("red"),
line = list(color = "rgb(0,0,0)",
width = 5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
library(plotly)
library(ggplot2)
x <- c("pA", "pB", "pC")
y <- c(20, 37, 12)
text <- c("29% Share", "67% Share", "7% Share")
data <- data.frame(x, y, text)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = toRGB("red"),
line = list(color = "rgb(0,0,0)",
width = 5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
library(plotly)
library(ggplot2)
x <- c("pA", "pB", "pC")
y <- c(20, 37, 12)
text <- c("29% Share", "67% Share", "7% Share")
data <- data.frame(x, y, text)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = toRGB("red"),
line = list(color = "rgb(0,0,0)",
width = 2))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p2 <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="choropleth-ag")
chart_link
print(p2)
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
rm(list = ls())
shiny::runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
styler:::style_active_file()
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='ryanangliss', token='DBD5EC210E0A54AC45390C1D54A26EA5', secret='6PSHX0BsR+dUQGpaosVUG/tQBtQufggnLpCXaKe2')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
install.packages("shinythemes")
shiny::runApp('Desktop/INFO/INFO-201-Group-Project')
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
setwd("~/Desktop/INFO/INFO-201-Group-Project")
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
View(emissions_by_nation)
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA") %>%
filter(Year > year)
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA")
View(emissions_us)
shiny::runApp()
emission_plot <- function(year, type) {
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA") %>%
filter(Year > year)
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = Total))
print(type)
return(total_emissions_year)
}
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = !!as.name(type)))
runApp()
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = Total))
runApp()
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
library("dplyr")
library("ggplot2")
emissions_by_nation <- read.csv("data/co2_emission_by_nation.csv", stringsAsFactors = FALSE)
sales_by_year_original <- read.csv("data/EV_sales_by_year.csv", stringsAsFactors = FALSE)
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA")
emission_plot <- function(year, type) {
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA") %>%
filter(Year > year)
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = type))
return(total_emissions_year)
}
runApp()
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = type))
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = Total))
print(type)
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
runApp()
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
library("dplyr")
library("ggplot2")
emissions_by_nation <- read.csv("data/co2_emission_by_nation.csv", stringsAsFactors = FALSE)
sales_by_year_original <- read.csv("data/EV_sales_by_year.csv", stringsAsFactors = FALSE)
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA")
emission_plot <- function(year, type) {
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA") %>%
filter(Year > year)
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = !!as.name(type)))
print(type)
return(total_emissions_year)
}
runApp()
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
library("dplyr")
library("ggplot2")
emissions_by_nation <- read.csv("data/co2_emission_by_nation.csv", stringsAsFactors = FALSE)
sales_by_year_original <- read.csv("data/EV_sales_by_year.csv", stringsAsFactors = FALSE)
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA")
emission_plot <- function(year, type) {
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA") %>%
filter(Year < year[1] & Year > year[2])
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = !!as.name(type)))
print(type)
return(total_emissions_year)
}
runApp()
library("dplyr")
library("ggplot2")
emissions_by_nation <- read.csv("data/co2_emission_by_nation.csv", stringsAsFactors = FALSE)
sales_by_year_original <- read.csv("data/EV_sales_by_year.csv", stringsAsFactors = FALSE)
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA")
emission_plot <- function(year, type) {
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA") %>%
filter(Year < year[1] & Year > year[2])
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = !!as.name(type)))
print(year[1])
print(year[2])
return(total_emissions_year)
}
library("dplyr")
library("ggplot2")
emissions_by_nation <- read.csv("data/co2_emission_by_nation.csv", stringsAsFactors = FALSE)
sales_by_year_original <- read.csv("data/EV_sales_by_year.csv", stringsAsFactors = FALSE)
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA")
emission_plot <- function(year, type) {
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA") %>%
filter(Year < year[1] & Year > year[2])
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = !!as.name(type)))
print(year[1])
print(year[2])
return(total_emissions_year)
}
library("dplyr")
library("ggplot2")
emissions_by_nation <- read.csv("data/co2_emission_by_nation.csv", stringsAsFactors = FALSE)
sales_by_year_original <- read.csv("data/EV_sales_by_year.csv", stringsAsFactors = FALSE)
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA")
emission_plot <- function(year, type) {
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA") %>%
filter(Year < year[1] & Year > year[2])
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = !!as.name(type)))
print(year[1])
print(year[2])
return(total_emissions_year)
}
runApp()
library("dplyr")
library("ggplot2")
emissions_by_nation <- read.csv("data/co2_emission_by_nation.csv", stringsAsFactors = FALSE)
sales_by_year_original <- read.csv("data/EV_sales_by_year.csv", stringsAsFactors = FALSE)
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA")
emission_plot <- function(year, type) {
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA") %>%
filter(Year > year[1] & Year < year[2])
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = !!as.name(type)))
print(year[1])
print(year[2])
return(total_emissions_year)
}
library("dplyr")
library("ggplot2")
emissions_by_nation <- read.csv("data/co2_emission_by_nation.csv", stringsAsFactors = FALSE)
sales_by_year_original <- read.csv("data/EV_sales_by_year.csv", stringsAsFactors = FALSE)
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA")
emission_plot <- function(year, type) {
emissions_us <- emissions_by_nation %>%
filter(Country == "UNITED STATES OF AMERICA") %>%
filter(Year > year[1] & Year < year[2])
total_emissions_year <- ggplot(emissions_us) +
geom_col(mapping = aes(x = Year, y = !!as.name(type)))
print(year[1])
print(year[2])
return(total_emissions_year)
}
runApp()
runApp()
shiny::runApp()
shiny::runApp()
setwd("~/Desktop/INFO/INFO-201-Group-Project")
runApp()
runApp()
