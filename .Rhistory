print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
test
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
te
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.12))
is_round <- function(num) {
round(num) == num
}
print(is_round(50))
print(is_round(50.13))
library("ggplot2")
library("ggplot2")
ggplot(data = midwest) +
geom_point(mapping = aes(x = percollege, y = percadultpoverty))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = class))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = class)) +
scale_color_brewer(palette = "Set3")
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = class)) +
scale_color_brewer(palette = "Set1")
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = class)) +
CoordFlip()
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy)) +
facet_wrap(class)
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = "blue"))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = blue))
ggplot(data = mpg) +
geom_bar(mapping = aes(x = hwy, fill = "red"))
ggplot(data = mpg) +
geom_bar(fill = "red", mapping = aes(x = hwy))
ggplot(data = mpg) +
geom_bar(fill = "blue", mapping = aes(x = hwy))
install.packages("plotly")
library(plotly)
library(plotly)
library(ggplot2)
x <- c("pA", "pB", "pC")
y <- c(20, 37, 12)
text <- c("29% Share", "67% Share", "7% Share")
data <- data.frame(x, y, text)
View(data)
View(data)
library(plotly)
library(ggplot2)
x <- c("pA", "pB", "pC")
y <- c(20, 37, 12)
text <- c("29% Share", "67% Share", "7% Share")
data <- data.frame(x, y, text)
p <- plot_ly(data, x = ~x, y = ~y, type = bar, text = text,
marker = list(color = "rgb(158,202,225",
line = list(color = "rgb(100,202,105",
width = 1,5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
library(plotly)
library(ggplot2)
x <- c("pA", "pB", "pC")
y <- c(20, 37, 12)
text <- c("29% Share", "67% Share", "7% Share")
data <- data.frame(x, y, text)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225",
line = list(color = "rgb(100,202,105",
width = 1,5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225)",
line = list(color = "rgb(100,202,105",
width = 1,5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225)",
line = list(color = "rgb(100,202,105)",
width = 1,5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225)",
line = list(color = "rgb(100,202,105)",
width = 1.5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225)",
line = list(color = "rgb(0,0,0)",
width = 1.5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225)",
line = list(color = "rgb(0,0,0)",
width = 2))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(158,202,225)",
line = list(color = "rgb(0,0,0)",
width = 5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(51,0,111)",
line = list(color = "rgb(0,0,0)",
width = 5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = "rgb(80,20,111)",
line = list(color = "rgb(0,0,0)",
width = 5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
library(plotly)
library(ggplot2)
x <- c("pA", "pB", "pC")
y <- c(20, 37, 12)
text <- c("29% Share", "67% Share", "7% Share")
data <- data.frame(x, y, text)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = toRgb("red"),
line = list(color = "rgb(0,0,0)",
width = 5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
library(plotly)
library(ggplot2)
x <- c("pA", "pB", "pC")
y <- c(20, 37, 12)
text <- c("29% Share", "67% Share", "7% Share")
data <- data.frame(x, y, text)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = toRGB("red"),
line = list(color = "rgb(0,0,0)",
width = 5))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
library(plotly)
library(ggplot2)
x <- c("pA", "pB", "pC")
y <- c(20, 37, 12)
text <- c("29% Share", "67% Share", "7% Share")
data <- data.frame(x, y, text)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = toRGB("red"),
line = list(color = "rgb(0,0,0)",
width = 2))) %>%
layout(title = "Sales",
xaxis = list(title = ""),
yaxis = list(title = ""))
print(p)
df <- read.csv("https://raw.githubusercontent.com/plotly/datasets/master/2011_us_ag_exports.csv")
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
p2 <- plot_geo(df, locationmode = 'USA-states') %>%
add_trace(
z = ~total.exports, text = ~hover, locations = ~code,
color = ~total.exports, colors = 'Purples'
) %>%
colorbar(title = "Millions USD") %>%
layout(
title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)',
geo = g
)
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="choropleth-ag")
chart_link
print(p2)
styler:::style_active_file()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
rm(list = ls())
shiny::runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
styler:::style_active_file()
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='ryanangliss', token='DBD5EC210E0A54AC45390C1D54A26EA5', secret='6PSHX0BsR+dUQGpaosVUG/tQBtQufggnLpCXaKe2')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
runApp('Desktop/INFO/shinyapptest/test')
install.packages("shinythemes")
shiny::runApp('Desktop/INFO/INFO-201-Group-Project')
shiny::runApp('Desktop/INFO/INFO-201-Group-Project')
shiny::runApp('Desktop/INFO/a7--anglissr')
runApp('Desktop/INFO/a7--anglissr')
runApp('Desktop/INFO/a7--anglissr')
runApp('Desktop/INFO/a7--anglissr')
runApp('Desktop/INFO/a7--anglissr')
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
lintr:::addin_lint()
state.add
state
lintr:::addin_lint()
View(myui)
shiny::runApp('Desktop/INFO/a7--anglissr')
runApp('Desktop/INFO/a7--anglissr')
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
setwd("~/Desktop/INFO/INFO-201-Group-Project")
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
test <- "(SUP , BRO)"
strsplit(test, ",")
strsplit(test, ",")[[1]]
strsplit(test, ",")[1]
unlist(strsplit(test, ","))
unlist(strsplit(test, ",")) [1]
str_replace(unlist(strsplit(test, ","))[1], "( ", "")
library(stringr)
str_replace(unlist(strsplit(test, ","))[1], "( ", "")
unlist(strsplit(test, ","))[1]
str_replace(unlist(strsplit(test, ","))[1], "(", "")
str_replace(unlist(strsplit(test, ","))[1], "s", " "
str_replace(unlist(strsplit(test, ","))[1], "s", " ")
str_replace(unlist(strsplit(test, ","))[1], "s", " ")
str_replace(unlist(strsplit(test, ","))[1], "S", " ")
str_replace(unlist(strsplit(test, ","))[1], "( ", " ")
str_replace(unlist(strsplit(test, ","))[1], "\\( ", "")
str_replace(unlist(strsplit(test, ","))[1], "[(] ", "")
str_replace(unlist(strsplit(test, ","))[1], "[(]", "")
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
ev_charging$New.Georeferenced.Column
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
test <- ev_charging_plot()
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
test <- ev_charging_plot()
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
test <- ev_charging_plot()
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
test <- ev_charging_plot()
test <- ev_charging_plot()
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
View(locations)
View(ev_charging)
test <- ev_charging_plot()
ev_charging$lat
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
ev_charging$lat
test <- ev_charging_plot()
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
test <- ev_charging_plot(locations)
is.vector(ev_charging$lat)
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
print(test)
View(locations)
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
View(locations)
locations <- data.frame(
label = ev_charging$Address..1,
latitude = c(47.6553, 47.6163),
longitude = c(-122.3035, -122.3216)
)
locations <- data.frame(
label = ev_charging$Address..1,
latitude = ev_charging$lat,
longitude = ev_charging$lon
)
View(locations)
ev_charging$lat
test4 <- ev_charging$lat
View(test4)
test4 <- ev_charging[[2]]
locations <- data.frame(
label = ev_charging$Address..1,
latitude = ev_charging[[14]],
longitude = ev_charging[[15]]
)
View(locations)
ev_charging[[14]]
unlist(ev_charging[14])
is.vector(ev_charging[[14]])
locations <- data.frame(
label = ev_charging$Address..1,
latitude = unlist(ev_charging[14]),
longitude = unlist(ev_charging[15])
)
View(locations)
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
View(test)
print(test)
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
print(test)
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
print(test)
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
print(test)
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
print(ev_charging_plot())
shiny::runApp()
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("reshape2")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
runApp()
runApp()
runApp()
runApp()
styler:::style_active_file()
runApp()
runApp()
runApp()
runApp()
vehicles_by_year <- t(read.csv("data/vehicles_by_year.csv", stringsAsFactors = FALSE, thousands=','))
vehicles_by_year$V2 <- as.numeric(gsub(",", "", vehicles_by_year$V2))
View(vehicles_by_year)
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
View(vehicles_by_year)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sales_type_plot <- ggplot(data = electric_vehicle_sales_type) +
geom_col(mapping = aes(x = Year, y = !!as.name(selection2)), fill = "#33cc33") +
labs(title = "Electric Vehicle Sales by Type of EV in the US",
subtitle = "(1999 - 2017)",
caption = "Data from the Bureau of Transportation Statistics (US DOT)",
y = "") +
theme_classic() +
scale_y_continuous(labels=function(n){format(n, scientific = FALSE)}, limits = c(0, 500000), breaks = seq(0, 500000, by = 50000))
runApp()
View(electric_vehicle_sales_type)
View(electric_vehicle_sales_type)
source('~/Desktop/INFO/INFO-201-Group-Project/analysis.R')
cbind(electric_vehicle_sales_type, total = rowSums(electric_vehicle_sales_type))
electric_vehicle_sales_type$V4 <- as.numeric(as.character(electric_vehicle_sales_type$V4))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
